1. Spring aop原理及各种应用场景

AOP是Aspect Oriented Programing的简称，面向切面编程。AOP适合于那些具有横切逻辑的应用：如性能检测、访问控制、事物管理、缓存、对象池管理以及日志记录。
AOP将这些分散在各个业务逻辑中的代码通过横向切割的方式抽取到一个独立的模块中。AOP实现的关键就在于AOP框架自动创建的AOP代理，AOP代理则可分为静态代理和
动态代理两大类，其中静态代理是指使用AOP框架提供的命令进行编译，从而在编译阶段，就可生成AOP代理类，因此也成为编译时增强；而动态代理则在运行时借助于JDK
动态代理、CGLIB等在内存中“临时”生成AOP动态代理类，因此也称为运行时增强。

代理对象的方法 = 增强处理 + 被处理对象的方法

Spring AOP 则采用运行时生成AOP代理类，因此无需使用特定编译器进行处理。由于Spring AOP需要在每次运行时生成AOP代理，因此性能略差一些。

AOP使用场景：Authentication权限、Caching缓存、Context passsing内容传递、Error handling错误处理、Lazy loading懒加载、Debugging调试、
logging/tracing/profiling/monitoring记录跟踪 优化 校准、Performance/optimization性能优化、Persistence持久化、Resource pooling资源池、
Synchronization同步、Transactions事物

AOP相关概念
方面/切面（Aspect）：关注点的模块化，关注点实现可能另外横切多个对象
连接点（JoinPoint）：程序执行过程中明确的点
通知（Advice）：在特定的连接点，AOP框架执行的动作。通知类型包括around、before、throws。Spring定义的advice包括BeforeAdvice、AfterAdvice、
ThrowAdvice、DynamicIntroductionAdvice
切入点（PointCut）：指定一个通知被引发的一系列连接点的集合
引入（Introduction）：添加方法或字段到被通知的类。Spring允许引入新的接口道任何被通知的对象。
